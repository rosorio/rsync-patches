From: Dave Taht <d@taht.net>

In the bufferbloat age, anything that can make for a kinder, gentler bulk
transfer protocol seems desirable.

This add support for user and server selectable congestion control algorithms.

For example:
    --congestion-alg=lp # For the tcp-lp algorithm on the command line

And diffserv support:
    --diffserv=8 for setting the CS1 bit

Also available in rsync daemon modules:

[mystuff]
    congestion alg = westwood # for a wireless connection
    diffserv = 8

This could be improved by being able to specify a list of congestion algorithms
to try, symbolic names for diffserv (CS1), a better name than 'congestion-alg',
and some error checking.

To use this patch, run these commands for a successful build:

    patch -p1 <patches/congestion.diff
    ./configure                         (optional if already run)
    make

based-on: 3305a7a063ab0167cab5bf7029da53abaa9fdb6e
diff --git a/daemon-parm.txt b/daemon-parm.txt
--- a/daemon-parm.txt
+++ b/daemon-parm.txt
@@ -18,6 +18,7 @@ Locals: =================================================================
 STRING	auth_users		NULL
 STRING	charset			NULL
 STRING	comment			NULL
+STRING	congestion_alg		NULL
 STRING	dont_compress		DEFAULT_DONT_COMPRESS
 STRING	early_exec		NULL
 STRING	exclude			NULL
@@ -45,6 +46,7 @@ STRING	uid			NULL
 PATH	path			NULL
 PATH	temp_dir		NULL
 
+INTEGER	diffserv		8
 INTEGER	max_connections		0
 INTEGER	max_verbosity		1
 INTEGER	timeout			0
diff --git a/options.c b/options.c
--- a/options.c
+++ b/options.c
@@ -79,6 +79,8 @@ int delete_during = 0;
 int delete_before = 0;
 int delete_after = 0;
 int delete_excluded = 0;
+int diffserv = 8;
+char *congestion_alg = NULL;
 int remove_source_files = 0;
 int one_file_system = 0;
 int protocol_version = PROTOCOL_VERSION;
@@ -832,6 +834,8 @@ static struct poptOption long_options[] = {
   {"outbuf",           0,  POPT_ARG_STRING, &outbuf_mode, 0, 0, 0 },
   {"remote-option",   'M', POPT_ARG_STRING, 0, 'M', 0, 0 },
   {"protocol",         0,  POPT_ARG_INT,    &protocol_version, 0, 0, 0 },
+  {"congestion-alg",   0,  POPT_ARG_STRING, &congestion_alg, 0, 0, 0 },
+  {"diffserv",         0,  POPT_ARG_INT,    &diffserv, 0, 0, 0 },
   {"checksum-seed",    0,  POPT_ARG_INT,    &checksum_seed, 0, 0, 0 },
   {"server",           0,  POPT_ARG_NONE,   0, OPT_SERVER, 0, 0 },
   {"sender",           0,  POPT_ARG_NONE,   0, OPT_SENDER, 0, 0 },
diff --git a/rsync.1.md b/rsync.1.md
--- a/rsync.1.md
+++ b/rsync.1.md
@@ -531,6 +531,8 @@ has its own detailed description later in this manpage.
 --address=ADDRESS        bind address for outgoing socket to daemon
 --port=PORT              specify double-colon alternate port number
 --sockopts=OPTIONS       specify custom TCP options
+--diffserv=[0-63]        specify diffserv setting
+--congestion-alg=STRING  choose a congestion algo
 --blocking-io            use blocking I/O for the remote shell
 --outbuf=N|L|B           set out buffering to None, Line, or Block
 --stats                  give some file-transfer stats
diff --git a/socket.c b/socket.c
--- a/socket.c
+++ b/socket.c
@@ -40,6 +40,8 @@ extern char *sockopts;
 extern int default_af_hint;
 extern int connect_timeout;
 extern int pid_file_fd;
+extern int diffserv;
+extern char *congestion_alg;
 
 #ifdef HAVE_SIGACTION
 static struct sigaction sigact;
@@ -166,6 +168,37 @@ static void contimeout_handler(UNUSED(int val))
 	connect_timeout = -1;
 }
 
+/* Set special socket options
+ *
+ * Diffserv is a value in the range of 0-63, and needs to be shifted left
+ *          2 places AND treated differently for ipv4 and ipv6.
+ * Setting TCP congestion control is rather Linux specific (at the moment)
+ * and sends a varying length string to setsockopt rather than an integer
+ * or character.
+*/
+
+void set_special_sockopts(int s)
+{
+#if defined(TCP_CONGESTION)
+	if (congestion_alg) {
+		if (setsockopt(s, SOL_TCP, TCP_CONGESTION, congestion_alg, strlen(congestion_alg)) == -1)
+			rprintf(FINFO, "Couldn't set %s congestion algorithm\n", congestion_alg);
+	}
+#endif
+
+/* setting the diffserv/tos bits is different on ipv6 and
+ *  ipv4, so we just hammer down on both and ignore the result
+ *  And ipv6 demands an int for v. I didn't write the spec.
+ */
+	if (diffserv) {
+		int v = (diffserv & 63) <<2;
+		setsockopt(s,IPPROTO_IP, IP_TOS, &v, sizeof(v));
+#if defined(IPV6_TCLASS)
+		setsockopt(s,IPPROTO_IPV6, IPV6_TCLASS, &v, sizeof(v));
+#endif
+	}
+}
+
 /* Open a socket to a tcp remote host with the specified port.
  *
  * Based on code from Warren.  Proxy support by Stephen Rothwell.
@@ -272,6 +305,7 @@ int open_socket_out(char *host, int port, const char *bind_addr, int af_hint)
 			alarm(connect_timeout);
 		}
 
+		set_special_sockopts(s);
 		set_socket_options(s, sockopts);
 		while (connect(s, res->ai_addr, res->ai_addrlen) < 0) {
 			if (connect_timeout < 0)
@@ -440,6 +474,7 @@ static int *open_socket_in(int type, int port, const char *bind_addr,
 			continue;
 		}
 
+		set_special_sockopts(s);
 		setsockopt(s, SOL_SOCKET, SO_REUSEADDR,
 			   (char *)&one, sizeof one);
 		if (sockopts)
diff -Nurp a/rrsync.1 b/rrsync.1
--- a/rrsync.1
+++ b/rrsync.1
@@ -1,176 +0,0 @@
-.TH "rrsync" "1" "15 Jan 2025" "rrsync from rsync 3.4.1" "User Commands"
-.\" prefix=/usr
-.P
-.SH "NAME"
-.P
-rrsync \- a script to setup restricted rsync users via ssh logins
-.P
-.SH "SYNOPSIS"
-.P
-.nf
-rrsync [-ro|-wo] [-munge] [-no-del] [-no-lock] [-no-overwrite]  DIR
-.fi
-.P
-The single non-option argument specifies the restricted \fIDIR\fP to use. It can be
-relative to the user's home directory or an absolute path.
-.P
-The online version of this manpage (that includes cross-linking of topics)
-is available at
-.UR https://download.samba.org/pub/rsync/rrsync.1
-.UE .
-.P
-.SH "DESCRIPTION"
-.P
-A user's ssh login can be restricted to only allow the running of an rsync
-transfer in one of two easy ways:
-.P
-.IP o
-forcing the running of the rrsync script
-.IP o
-forcing the running of an rsync daemon-over-ssh command.
-.P
-Both of these setups use a feature of ssh that allows a command to be forced to
-run instead of an interactive shell.  However, if the user's home shell is bash,
-please see BASH SECURITY ISSUE for a potential issue.
-.P
-To use the rrsync script, edit the user's \fB~/.ssh/authorized_keys\fP file and add
-a prefix like one of the following (followed by a space) in front of each
-ssh-key line that should be restricted:
-.RS 4
-.P
-.nf
-command="rrsync DIR"
-command="rrsync -ro DIR"
-command="rrsync -munge -no-del DIR"
-.fi
-.RE
-.P
-Then, ensure that the rrsync script has your desired option restrictions. You
-may want to copy the script to a local bin dir with a unique name if you want
-to have multiple configurations. One or more rrsync options can be specified
-prior to the \fIDIR\fP if you want to further restrict the transfer.
-.P
-To use an rsync daemon setup, edit the user's \fB~/.ssh/authorized_keys\fP file and
-add a prefix like one of the following (followed by a space) in front of each
-ssh-key line that should be restricted:
-.RS 4
-.P
-.nf
-command="rsync --server --daemon ."
-command="rsync --server --daemon --config=/PATH/TO/rsyncd.conf ."
-.fi
-.RE
-.P
-Then, ensure that the rsyncd.conf file is created with one or more module names
-with the appropriate path and option restrictions.  If rsync's
-\fB\-\-config\fP option is omitted, it defaults to \fB~/rsyncd.conf\fP.
-See the \fBrsyncd.conf\fP(5) manpage for details of how to
-configure an rsync daemon.
-.P
-When using rrsync, there can be just one restricted dir per authorized key.  A
-daemon setup, on the other hand, allows multiple module names inside the config
-file, each one with its own path setting.
-.P
-The remainder of this manpage is dedicated to using the rrsync script.
-.P
-.SH "OPTIONS"
-.P
-.IP "\fB\-ro\fP"
-Allow only reading from the DIR. Implies \fB\-no-del\fP and
-\fB\-no-lock\fP.
-.IP "\fB\-wo\fP"
-Allow only writing to the DIR.
-.IP "\fB\-munge\fP"
-Enable rsync's \fB\-\-munge-links\fP on the server side.
-.IP "\fB\-no-del\fP"
-Disable rsync's \fB\-\-delete*\fP and \fB\-\-remove*\fP options.
-.IP "\fB\-no-lock\fP"
-Avoid the single-run (per-user) lock check.  Useful with \fB\-munge\fP.
-.IP "\fB\-no-overwrite\fP"
-Enforce \fB\-\-ignore-existing\fP on the server. Prevents overwriting existing
-files when the server is the receiver.
-.IP "\fB\-help\fP, \fB\-h\fP"
-Output this help message and exit.
-.P
-.SH "SECURITY RESTRICTIONS"
-.P
-The rrsync script validates the path arguments it is sent to try to restrict
-them to staying within the specified DIR.
-.P
-The rrsync script rejects rsync's \fB\-\-copy-links\fP option (by
-default) so that a copy cannot dereference a symlink within the DIR to get to a
-file outside the DIR.
-.P
-The rrsync script rejects rsync's \fB\-\-protect-args\fP (\fB\-s\fP) option
-because it would allow options to be sent to the server-side that the script
-cannot check.  If you want to support \fB\-\-protect-args\fP, use a daemon-over-ssh
-setup.
-.P
-The rrsync script accepts just a subset of rsync's options that the real rsync
-uses when running the server command.  A few extra convenience options are also
-included to help it to interact with BackupPC and accept some convenient user
-overrides.
-.P
-The script (or a copy of it) can be manually edited if you want it to customize
-the option handling.
-.P
-.SH "BASH SECURITY ISSUE"
-.P
-If your users have bash set as their home shell, bash may try to be overly
-helpful and ensure that the user's login bashrc files are run prior to
-executing the forced command.  This can be a problem if the user can somehow
-update their home bashrc files, perhaps via the restricted copy, a shared home
-directory, or something similar.
-.P
-One simple way to avoid the issue is to switch the user to a simpler shell,
-such as dash.  When choosing the new home shell, make sure that you're not
-choosing bash in disguise, as it is unclear if it avoids the security issue.
-.P
-Another potential fix is to ensure that the user's home directory is not a
-shared mount and that they have no means of copying files outside of their
-restricted directories.  This may require you to force the enabling of symlink
-munging on the server side.
-.P
-A future version of openssh may have a change to the handling of forced
-commands that allows it to avoid using the user's home shell.
-.P
-.SH "EXAMPLES"
-.P
-The \fB~/.ssh/authorized_keys\fP file might have lines in it like this:
-.RS 4
-.P
-.nf
-command="rrsync client/logs" ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEAzG...
-command="rrsync -ro results" ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEAmk...
-.fi
-.RE
-.P
-.SH "FILES"
-.P
-~/.ssh/authorized_keys
-.P
-.SH "SEE ALSO"
-.P
-\fBrsync\fP(1), \fBrsyncd.conf\fP(5)
-.P
-.SH "VERSION"
-.P
-This manpage is current for version 3.4.1 of rsync.
-.P
-.SH "CREDITS"
-.P
-rsync is distributed under the GNU General Public License.  See the file
-COPYING for details.
-.P
-An rsync web site is available at
-.UR https://rsync.samba.org/
-.UE
-and its github
-project is
-.UR https://github.com/RsyncProject/rsync
-.UE .
-.P
-.SH "AUTHOR"
-.P
-The original rrsync perl script was written by Joe Smith.  Many people have
-later contributed to it.  The python version was created by Wayne Davison.
diff -Nurp a/rrsync.1.html b/rrsync.1.html
--- a/rrsync.1.html
+++ b/rrsync.1.html
@@ -1,169 +0,0 @@
-<html><head>
-<title>rrsync(1) manpage</title>
-<meta charset="UTF-8"/>
-<link href="https://fonts.googleapis.com/css2?family=Roboto&family=Roboto+Mono&display=swap" rel="stylesheet">
-<style>
-body {
-  max-width: 50em;
-  margin: auto;
-}
-body, b, strong, u {
-  font-family: 'Roboto', sans-serif;
-}
-a.tgt { font-face: symbol; font-weight: 400; font-size: 70%; visibility: hidden; text-decoration: none; color: #ddd; padding: 0 4px; border: 0; }
-a.tgt:after { content: '🔗'; }
-a.tgt:hover { color: #444; background-color: #eaeaea; }
-h1:hover > a.tgt, h2:hover > a.tgt, h3:hover > a.tgt, dt:hover > a.tgt { visibility: visible; }
-code {
-  font-family: 'Roboto Mono', monospace;
-  font-weight: bold;
-  white-space: pre;
-}
-pre code {
-  display: block;
-  font-weight: normal;
-}
-blockquote pre code {
-  background: #f1f1f1;
-}
-dd p:first-of-type {
-  margin-block-start: 0em;
-}
-</style>
-</head><body>
-<h2 id="NAME">NAME<a href="#NAME" class="tgt"></a></h2>
-<p>rrsync -&#8288; a script to setup restricted rsync users via ssh logins</p>
-<h2 id="SYNOPSIS">SYNOPSIS<a href="#SYNOPSIS" class="tgt"></a></h2>
-<pre><code>rrsync [-ro|-wo] [-munge] [-no-del] [-no-lock] [-no-overwrite]  DIR
-</code></pre>
-<p>The single non-option argument specifies the restricted <u>DIR</u> to use. It can be
-relative to the user's home directory or an absolute path.</p>
-<p>The online version of this manpage (that includes cross-linking of topics)
-is available at <a href="https://download.samba.org/pub/rsync/rrsync.1">https://download.samba.org/pub/rsync/rrsync.1</a>.</p>
-<h2 id="DESCRIPTION">DESCRIPTION<a href="#DESCRIPTION" class="tgt"></a></h2>
-<p>A user's ssh login can be restricted to only allow the running of an rsync
-transfer in one of two easy ways:</p>
-<ul>
-<li>forcing the running of the rrsync script</li>
-<li>forcing the running of an rsync daemon-over-ssh command.</li>
-</ul>
-<p>Both of these setups use a feature of ssh that allows a command to be forced to
-run instead of an interactive shell.  However, if the user's home shell is bash,
-please see <a href="#BASH_SECURITY_ISSUE">BASH SECURITY ISSUE</a> for a potential issue.</p>
-<p>To use the rrsync script, edit the user's <code>~/.ssh/authorized_keys</code> file and add
-a prefix like one of the following (followed by a space) in front of each
-ssh-key line that should be restricted:</p>
-<blockquote>
-<pre><code>command=&quot;rrsync DIR&quot;
-command=&quot;rrsync -ro DIR&quot;
-command=&quot;rrsync -munge -no-del DIR&quot;
-</code></pre>
-</blockquote>
-<p>Then, ensure that the rrsync script has your desired option restrictions. You
-may want to copy the script to a local bin dir with a unique name if you want
-to have multiple configurations. One or more rrsync options can be specified
-prior to the <u>DIR</u> if you want to further restrict the transfer.</p>
-<p>To use an rsync daemon setup, edit the user's <code>~/.ssh/authorized_keys</code> file and
-add a prefix like one of the following (followed by a space) in front of each
-ssh-key line that should be restricted:</p>
-<blockquote>
-<pre><code>command=&quot;rsync --server --daemon .&quot;
-command=&quot;rsync --server --daemon --config=/PATH/TO/rsyncd.conf .&quot;
-</code></pre>
-</blockquote>
-<p>Then, ensure that the rsyncd.conf file is created with one or more module names
-with the appropriate path and option restrictions.  If rsync's
-<a href="rsync.1#dopt--config"><code>--config</code></a> option is omitted, it defaults to <code>~/rsyncd.conf</code>.
-See the <a href="rsyncd.conf.5"><strong>rsyncd.conf</strong>(5)</a> manpage for details of how to
-configure an rsync daemon.</p>
-<p>When using rrsync, there can be just one restricted dir per authorized key.  A
-daemon setup, on the other hand, allows multiple module names inside the config
-file, each one with its own path setting.</p>
-<p>The remainder of this manpage is dedicated to using the rrsync script.</p>
-<h2 id="OPTIONS">OPTIONS<a href="#OPTIONS" class="tgt"></a></h2>
-<dl>
-
-<dt id="opt-ro"><code>-ro</code><a href="#opt-ro" class="tgt"></a></dt><dd>
-<p>Allow only reading from the DIR. Implies <a href="#opt-no-del"><code>-no-del</code></a> and
-<a href="#opt-no-lock"><code>-no-lock</code></a>.</p>
-</dd>
-
-<dt id="opt-wo"><code>-wo</code><a href="#opt-wo" class="tgt"></a></dt><dd>
-<p>Allow only writing to the DIR.</p>
-</dd>
-
-<dt id="opt-munge"><code>-munge</code><a href="#opt-munge" class="tgt"></a></dt><dd>
-<p>Enable rsync's <a href="rsync.1#opt--munge-links"><code>--munge-links</code></a> on the server side.</p>
-</dd>
-
-<dt id="opt-no-del"><code>-no-del</code><a href="#opt-no-del" class="tgt"></a></dt><dd>
-<p>Disable rsync's <code>--delete*</code> and <code>--remove*</code> options.</p>
-</dd>
-
-<dt id="opt-no-lock"><code>-no-lock</code><a href="#opt-no-lock" class="tgt"></a></dt><dd>
-<p>Avoid the single-run (per-user) lock check.  Useful with <a href="#opt-munge"><code>-munge</code></a>.</p>
-</dd>
-
-<dt id="opt-no-overwrite"><code>-no-overwrite</code><a href="#opt-no-overwrite" class="tgt"></a></dt><dd>
-<p>Enforce <code>--ignore-existing</code> on the server. Prevents overwriting existing
-files when the server is the receiver.</p>
-</dd>
-
-<span id="opt-h"></span><dt id="opt-help"><code>-help</code>, <code>-h</code><a href="#opt-help" class="tgt"></a></dt><dd>
-<p>Output this help message and exit.</p>
-</dd>
-</dl>
-<h2 id="SECURITY_RESTRICTIONS">SECURITY RESTRICTIONS<a href="#SECURITY_RESTRICTIONS" class="tgt"></a></h2>
-<p>The rrsync script validates the path arguments it is sent to try to restrict
-them to staying within the specified DIR.</p>
-<p>The rrsync script rejects rsync's <a href="rsync.1#opt--copy-links"><code>--copy-links</code></a> option (by
-default) so that a copy cannot dereference a symlink within the DIR to get to a
-file outside the DIR.</p>
-<p>The rrsync script rejects rsync's <a href="rsync.1#opt--protect-args"><code>--protect-args</code></a> (<code>-s</code>) option
-because it would allow options to be sent to the server-side that the script
-cannot check.  If you want to support <code>--protect-args</code>, use a daemon-over-ssh
-setup.</p>
-<p>The rrsync script accepts just a subset of rsync's options that the real rsync
-uses when running the server command.  A few extra convenience options are also
-included to help it to interact with BackupPC and accept some convenient user
-overrides.</p>
-<p>The script (or a copy of it) can be manually edited if you want it to customize
-the option handling.</p>
-<h2 id="BASH_SECURITY_ISSUE">BASH SECURITY ISSUE<a href="#BASH_SECURITY_ISSUE" class="tgt"></a></h2>
-<p>If your users have bash set as their home shell, bash may try to be overly
-helpful and ensure that the user's login bashrc files are run prior to
-executing the forced command.  This can be a problem if the user can somehow
-update their home bashrc files, perhaps via the restricted copy, a shared home
-directory, or something similar.</p>
-<p>One simple way to avoid the issue is to switch the user to a simpler shell,
-such as dash.  When choosing the new home shell, make sure that you're not
-choosing bash in disguise, as it is unclear if it avoids the security issue.</p>
-<p>Another potential fix is to ensure that the user's home directory is not a
-shared mount and that they have no means of copying files outside of their
-restricted directories.  This may require you to force the enabling of symlink
-munging on the server side.</p>
-<p>A future version of openssh may have a change to the handling of forced
-commands that allows it to avoid using the user's home shell.</p>
-<h2 id="EXAMPLES">EXAMPLES<a href="#EXAMPLES" class="tgt"></a></h2>
-<p>The <code>~/.ssh/authorized_keys</code> file might have lines in it like this:</p>
-<blockquote>
-<pre><code>command=&quot;rrsync client/logs&quot; ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEAzG...
-command=&quot;rrsync -ro results&quot; ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEAmk...
-</code></pre>
-</blockquote>
-<h2 id="FILES">FILES<a href="#FILES" class="tgt"></a></h2>
-<p>~/.ssh/authorized_keys</p>
-<h2 id="SEE_ALSO">SEE ALSO<a href="#SEE_ALSO" class="tgt"></a></h2>
-<p><a href="rsync.1"><strong>rsync</strong>(1)</a>, <a href="rsyncd.conf.5"><strong>rsyncd.conf</strong>(5)</a></p>
-<h2 id="VERSION">VERSION<a href="#VERSION" class="tgt"></a></h2>
-<p>This manpage is current for version 3.4.1 of rsync.</p>
-<h2 id="CREDITS">CREDITS<a href="#CREDITS" class="tgt"></a></h2>
-<p>rsync is distributed under the GNU General Public License.  See the file
-<a href="COPYING">COPYING</a> for details.</p>
-<p>An rsync web site is available at <a href="https://rsync.samba.org/">https://rsync.samba.org/</a> and its github
-project is <a href="https://github.com/RsyncProject/rsync">https://github.com/RsyncProject/rsync</a>.</p>
-<h2 id="AUTHOR">AUTHOR<a href="#AUTHOR" class="tgt"></a></h2>
-<p>The original rrsync perl script was written by Joe Smith.  Many people have
-later contributed to it.  The python version was created by Wayne Davison.</p>
-<div style="float: right"><p><i>15 Jan 2025</i></p></div>
-</body></html>
diff -Nurp a/rsync.1 b/rsync.1
--- a/rsync.1
+++ b/rsync.1
@@ -1,5 +1,5 @@
 .TH "rsync" "1" "15 Jan 2025" "rsync 3.4.1" "User Commands"
-.\" prefix=/usr
+.\" prefix=/usr/local
 .P
 .SH "NAME"
 .P
@@ -630,6 +630,8 @@ has its own detailed description later i
 --address=ADDRESS        bind address for outgoing socket to daemon
 --port=PORT              specify double-colon alternate port number
 --sockopts=OPTIONS       specify custom TCP options
+--diffserv=[0-63]        specify diffserv setting
+--congestion-alg=STRING  choose a congestion algo
 --blocking-io            use blocking I/O for the remote shell
 --outbuf=N|L|B           set out buffering to None, Line, or Block
 --stats                  give some file-transfer stats
diff -Nurp a/rsync.1.html b/rsync.1.html
--- a/rsync.1.html
+++ b/rsync.1.html
@@ -523,6 +523,8 @@ has its own detailed description later i
 --address=ADDRESS        bind address for outgoing socket to daemon
 --port=PORT              specify double-colon alternate port number
 --sockopts=OPTIONS       specify custom TCP options
+--diffserv=[0-63]        specify diffserv setting
+--congestion-alg=STRING  choose a congestion algo
 --blocking-io            use blocking I/O for the remote shell
 --outbuf=N|L|B           set out buffering to None, Line, or Block
 --stats                  give some file-transfer stats
diff -Nurp a/rsyncd.conf.5 b/rsyncd.conf.5
--- a/rsyncd.conf.5
+++ b/rsyncd.conf.5
@@ -1,5 +1,5 @@
 .TH "rsyncd.conf" "5" "15 Jan 2025" "rsyncd.conf from rsync 3.4.1" "User Commands"
-.\" prefix=/usr
+.\" prefix=/usr/local
 .P
 .SH "NAME"
 .P
@@ -73,11 +73,11 @@ and a single line something like this to
 .RS 4
 .P
 .nf
-rsync   stream  tcp     nowait  root   /usr/bin/rsync rsyncd --daemon
+rsync   stream  tcp     nowait  root   /usr/local/bin/rsync rsyncd --daemon
 .fi
 .RE
 .P
-Replace "/usr/bin/rsync" with the path to where you have rsync installed on
+Replace "/usr/local/bin/rsync" with the path to where you have rsync installed on
 your system.  You will then need to send inetd a HUP signal to tell it to
 reread its config file.
 .P
diff -Nurp a/rsyncd.conf.5.html b/rsyncd.conf.5.html
--- a/rsyncd.conf.5.html
+++ b/rsyncd.conf.5.html
@@ -77,10 +77,10 @@ command &quot;<code>rsync --daemon</code
 </blockquote>
 <p>and a single line something like this to /etc/inetd.conf:</p>
 <blockquote>
-<pre><code>rsync   stream  tcp     nowait  root   /usr/bin/rsync rsyncd --daemon
+<pre><code>rsync   stream  tcp     nowait  root   /usr/local/bin/rsync rsyncd --daemon
 </code></pre>
 </blockquote>
-<p>Replace &quot;/usr/bin/rsync&quot; with the path to where you have rsync installed on
+<p>Replace &quot;/usr/local/bin/rsync&quot; with the path to where you have rsync installed on
 your system.  You will then need to send inetd a HUP signal to tell it to
 reread its config file.</p>
 <p>Note that you should <strong>not</strong> send the rsync daemon a HUP signal to force it to
diff -Nurp a/rsync-ssl.1 b/rsync-ssl.1
--- a/rsync-ssl.1
+++ b/rsync-ssl.1
@@ -1,5 +1,5 @@
 .TH "rsync-ssl" "1" "15 Jan 2025" "rsync-ssl from rsync 3.4.1" "User Commands"
-.\" prefix=/usr
+.\" prefix=/usr/local
 .P
 .SH "NAME"
 .P
